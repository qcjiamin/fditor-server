# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
# 创建出的容器名 [当前目录名]_[服务名]_[序号]， 可自定义
services:
  fditor-server:
    # container_name: xxx
    build:
      context: .
    args:
        NODE_ENV: ${NODE_ENV}
    # env_file:
    #   - .env
    # environment:
    #   NODE_ENV: production
    ports:
      # - 3090:3090
      - "3090:${PORT}"
    volumes:
      - /var/log/fditor-server/:/home/node/app/logs/
    # 为服务指定网络别名，方便Nginx引用
    networks:
      - fditor-network
    # 重启策略
    restart: unless-stopped
    # 健康检查，用于确保服务 ready
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT}/health/check"]
      interval: 10s
      timeout: 5s
      retries: 5
      # 启动后检测加延迟
      start_period: 5s
  fditor-nginx:
    # 使用官方Nginx镜像
    image: nginx:alpine
    # 映射80端口到宿主机88端口，可根据需要修改为443并配置SSL
    ports:
      - 88:80
      # - 443:443  # 如需HTTPS可开启此端口
    # 挂载Nginx配置文件
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      # 挂载日志卷
      - /var/log/nginx/:/var/log/nginx/
      # 如需HTTPS，挂载SSL证书
      # - ./nginx/ssl:/etc/nginx/ssl
    restart: unless-stopped
    # 依赖后端服务，确保后端先启动
    depends_on:
      # 不仅保证顺序，还必须检测依赖的服务状态是否正常[重启也会]
      fditor-server:
        condition: service_healthy
    networks:
      - fditor-network
      
# 定义自定义网络，确保服务间可以通信
networks:
  fditor-network:
    driver: bridge

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

