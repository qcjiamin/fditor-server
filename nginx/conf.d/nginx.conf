
upstream api_servers {
    # 默认轮询策略，可根据需求改为 ip_hash、weight 等
    # 使用 Node.js 容器的服务名或容器名（需确保在同一网络）
    server fditor-server-fditor-server-1:3090;
    # server 127.0.0.1:3091;
    # server 127.0.0.1:3092;
    # 可选优化：健康检查（自动剔除故障服务器）
    # keepalive 32; # 长连接复用，减少握手开销
}
server {
    listen 80;
    server_name  localhost;
    location / {
        # 服务器组，实现负载均衡
        proxy_pass http://api_servers;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    # 日志
    # 可以配置在 main， http, mail, stream, server, location 作用域。
    # buffer=32k：日志写入时先缓存到 32KB 的内存缓冲区，减少磁盘 IO 次数。
    # gzip：对日志内容进行 gzip 压缩后再写入（节省磁盘空间）。
    # flush=1m：若缓冲区未填满，1 分钟后强制将内容写入磁盘（避免日志长时间滞留内存）。
    access_log  /var/log/nginx/fditor-server-access.log  buffer=32k gzip flush=1m;
    # 日志等级分为[ debug | info | notice | warn | error | crit ]，从左至右，日志详细程度逐级递减，即debug最详细，crit最少。
    error_log  logs/error.log  info;
    # 需要注意的是：error_log off并不能关闭错误日志，而是会将错误日志记录到一个文件名为off的文件中。正确的关闭错误日志记录功能的方法如下：
    # error_log /dev/null;    表示将存储日志的路径设置为“垃圾桶”。
}
# another virtual host using mix of IP-, name-, and port-based configuration
#
#server {
#    listen       8000;
#    listen       somename:8080;
#    server_name  somename  alias  another.alias;
#    location / {
#        root   html;
#        index  index.html index.htm;
#    }
#}
# HTTPS server
#
#server {
#    listen       443 ssl;
#    server_name  localhost;
#    ssl_certificate      cert.pem;
#    ssl_certificate_key  cert.key;
#    ssl_session_cache    shared:SSL:1m;
#    ssl_session_timeout  5m;
#    ssl_ciphers  HIGH:!aNULL:!MD5;
#    ssl_prefer_server_ciphers  on;
#    location / {
#        root   html;
#        index  index.html index.htm;
#    }
#}


